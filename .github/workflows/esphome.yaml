---
name: ESPHome

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      esphome: ${{ steps.filter.outputs.esphome }}
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5
    - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3
      id: filter
      with:
        filters: |
          esphome:
            - 'esphome/**'

  esphome-compile:
    name: ESPHome Compile
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.esphome == 'true'
    strategy:
      fail-fast: false
      matrix:
        shard_index: [1, 2, 3, 4, 5, 6, 7, 8]
        shard_total: [8]
    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5

    - name: Create CI secrets.yaml (ephemeral)
      run: |
        mkdir -p esphome
        EK=$(openssl rand -base64 32)
        cat > esphome/secrets.yaml <<YAML
        encryption_key: "$EK"
        wifi_ssid: "ci"
        wifi_password: "ci-password"
        ota: "ci-ota"

        mqtt_host: "127.0.0.1"
        mqtt_username: "ci"
        mqtt_password: "ci"

        web_username: "ci"
        web_password: "ci"
        YAML

    - name: Run esphome-all compile (shard ${{ matrix.shard_index }}/${{ matrix.shard_total
        }})
      working-directory: esphome
      run: ./scripts/esphome-all compile -j 1 --shard ${{ matrix.shard_index }}/${{
        matrix.shard_total }}

    - name: Collect failed logs
      if: always()
      run: |
        mkdir -p esphome/logs_failed
        for s in esphome/logs/*.status; do
          [ -f "$s" ] || continue
          if [ "$(cat "$s")" != "OK" ]; then
            b="$(basename "$s" .status)"
            cp -f "esphome/logs/$b.log" "esphome/logs_failed/$b.log" 2>/dev/null || true
          fi
        done

    - name: Print failed logs
      if: always() && hashFiles('esphome/logs_failed/*.log') != ''
      run: |
        set -e
        for f in esphome/logs_failed/*.log; do
          echo "::group::$(basename "$f")"
          # Print the last 400 lines for readability
          tail -n 400 "$f" || true
          echo "::endgroup::"
        done
        exit 1

    - name: Upload failed logs artifact
      if: always() && hashFiles('esphome/logs_failed/*.log') != ''
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4
      with:
        name: esphome-logs-failed-${{ matrix.shard_index }}
        path: esphome/logs_failed/

  esphome-check:
    name: ESPHome Check
    runs-on: ubuntu-latest
    needs: [changes, esphome-compile]
    if: always()
    steps:
    - name: Check ESPHome results
      run: |-
        if [ "${{ needs.changes.outputs.esphome }}" != "true" ]; then
          echo "No ESPHome changes detected - skipping compilation"
          exit 0
        fi

        if [ "${{ needs.esphome-compile.result }}" != "success" ]; then
          echo "ESPHome compilation failed"
          exit 1
        fi

        echo "ESPHome compilation successful"
