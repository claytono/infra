---
- name: "Install prereq packages"
  ansible.builtin.apt:
    name:
      - "nfs-common"

- name: "Configure kernel modules for containerd"
  ansible.builtin.copy:
    dest: /etc/modules-load.d/containerd.conf
    content: |
      overlay
      br_netfilter
    mode: "0644"

- name: "Load kernel modules for containerd"
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  with_items:
    - overlay
    - br_netfilter

- name: "Configure sysctl for containerd"
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: true
  with_items:
    - { name: "net.bridge.bridge-nf-call-iptables", value: "1" }
    - { name: "net.ipv4.ip_forward", value: "1" }
    - { name: "net.bridge.bridge-nf-call-ip6tables", value: "1" }

- name: Configure sysctl for inotify (Grafana/K8s nodes)
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: true
  loop:
    - { name: "fs.inotify.max_user_watches", value: "1048576" }
    - { name: "fs.inotify.max_user_instances", value: "4096" }

- name: "Disabling accepting ICMP redirects"
  ansible.posix.sysctl:
    name: "net.ipv4.conf.all.accept_redirects"
    value: "0"

- name: "Disabling sending ICMP redirects"
  ansible.posix.sysctl:
    name: "net.ipv4.conf.all.send_redirects"
    value: "0"

- name: "Check if swap is enabled"
  ansible.builtin.command: "swapon --show"
  register: kubeadm_swap_status
  changed_when: false
  failed_when: false

- name: "Turn off swap"
  ansible.builtin.command: "swapoff -a"
  when: kubeadm_swap_status.stdout != ""

- name: "Disable swap in fstab"
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: "^([^#].*?\\sswap\\s+sw\\s+.*)$"
    replace: "# \\1"

- name: "Install apt-transport-https"
  ansible.builtin.apt:
    name: apt-transport-https
    state: latest # noqa package-latest

- name: "Add Kubernetes APT key"
  ansible.builtin.copy:
    # Copy from role's files directory to remote host
    src: "kubernetes-apt-keyring.gpg"
    dest: "/etc/apt/trusted.gpg.d/kubernetes-apt-keyring.gpg"
    mode: "0644"

- name: "Remove old unversioned Kubernetes sources file"
  ansible.builtin.file:
    path: "/etc/apt/sources.list.d/kubernetes.list"
    state: absent

- name: "Find existing Kubernetes APT source files"
  ansible.builtin.find:
    paths: /etc/apt/sources.list.d/
    patterns: "kubernetes-v*.list"
  register: kubeadm_existing_repo_files

- name: "Extract version numbers from existing files"
  ansible.builtin.set_fact:
    kubeadm_existing_versions: "{{ kubeadm_existing_repo_files.files | map(attribute='path') | map('basename') | map('regex_replace', '^kubernetes-v([0-9.]+)\\.list$',
      '\\1') | list }}"

- name: "Remove unmanaged Kubernetes APT repositories"
  ansible.builtin.file:
    path: "/etc/apt/sources.list.d/kubernetes-v{{ item }}.list"
    state: absent
  loop: "{{ kubeadm_existing_versions }}"
  when: item not in kubernetes_repo_versions
  register: kubeadm_remove_repos

- name: "Add managed Kubernetes APT repositories"
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/trusted.gpg.d/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ item }}/deb/ /"
    filename: "kubernetes-v{{ item }}"
    state: present
    update_cache: false
  loop: "{{ kubernetes_repo_versions }}"
  register: kubeadm_add_repos

- name: "Update APT cache"
  ansible.builtin.apt:
    update_cache: true
  when: kubeadm_remove_repos is changed or kubeadm_add_repos is changed

- name: "Create kubeadm package pin for version"
  ansible.builtin.copy:
    dest: "/etc/apt/preferences.d/kubeadm"
    content: |
      Package: kubeadm
      Pin: version {{ kubeadm_version }}
      Pin-Priority: 900
    mode: "0644"
  when: kubeadm_version is defined

- name: "Create kubelet package pin for version"
  ansible.builtin.copy:
    dest: "/etc/apt/preferences.d/kubelet"
    content: |
      Package: kubelet
      Pin: version {{ kubelet_version }}
      Pin-Priority: 900
    mode: "0644"
  when: kubelet_version is defined

- name: "Create kubectl package pin for version"
  ansible.builtin.copy:
    dest: "/etc/apt/preferences.d/kubectl"
    content: |
      Package: kubectl
      Pin: version {{ kubectl_version }}
      Pin-Priority: 900
    mode: "0644"
  when: kubectl_version is defined

- name: "Create kubernetes-cni package pin for version"
  ansible.builtin.copy:
    dest: "/etc/apt/preferences.d/kubernetes-cni"
    content: |
      Package: kubernetes-cni
      Pin: version {{ kubernetes_cni_version }}
      Pin-Priority: 900
    mode: "0644"
  when: kubernetes_cni_version is defined

- name: "Create cri-tools package pin for version"
  ansible.builtin.copy:
    dest: "/etc/apt/preferences.d/cri-tools"
    content: |
      Package: cri-tools
      Pin: version {{ cri_tools_version }}
      Pin-Priority: 900
    mode: "0644"
  when: cri_tools_version is defined

- name: "Install Kubernetes packages (except kubelet)"
  ansible.builtin.apt:
    name:
      - "cri-tools={{ cri_tools_version }}"
      - "kubeadm={{ kubeadm_version }}"
      - "kubectl={{ kubectl_version }}"
      - "kubernetes-cni={{ kubernetes_cni_version }}"
    state: present
    allow_downgrade: true

- name: "Install kubelet package"
  ansible.builtin.apt:
    name: "kubelet={{ kubelet_version }}"
    state: present
    allow_downgrade: true
  notify: "Restart kubelet"
