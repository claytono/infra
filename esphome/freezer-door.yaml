---
substitutions:
  devicename: freezer-door
  device_id: freezer_door
  human_devicename: Freezer Door
  icon: mdi:coolant-temperature

packages:
  wifi: !include common/wifi.yaml
  base: !include common/base.yaml
  web: !include common/web.yaml
  d1_mini_bme280: !include common/device-classes/d1_mini.yaml

binary_sensor:
- platform: gpio
  name: ${human_devicename} Closed
  pin:
    number: D3
    mode: INPUT_PULLUP
    inverted: false
  filters:
  - delayed_on: 50ms
  - delayed_off: 50ms
  device_class: door
  on_press:
  - script.execute: reset_timer
  - output.turn_on: buzzer_pwm
  - delay: 250ms
  - output.turn_off: buzzer_pwm
  on_release:
  - output.turn_on: buzzer_pwm
  - delay: 250ms
  - output.turn_off: buzzer_pwm

output:
- platform: esp8266_pwm
  id: buzzer_pwm
  pin: D5
  min_power: 0%
  max_power: 50%
  inverted: false
- platform: gpio
  id: status_led
  pin:
    number: D4
    inverted: true

globals:
- id: buzzer_state
  type: bool
  initial_value: 'false'
- id: door_duration
  type: int
  restore_value: false
  initial_value: '0'
- id: buzzer_pattern_state
  type: bool
  initial_value: 'false'

switch:
- platform: template
  name: ${human_devicename} Buzzer Switch
  id: buzzer_switch
  lambda: |-
    return id(buzzer_state);
  turn_on_action:
  - output.turn_on: buzzer_pwm
  - globals.set:
      id: buzzer_state
      value: 'true'
  turn_off_action:
  - output.turn_off: buzzer_pwm
  - globals.set:
      id: buzzer_state
      value: 'false'

- platform: template
  name: ${human_devicename} Alert
  id: alert_switch
  lambda: |-
    return id(buzzer_pattern_state);
  turn_on_action:
  - globals.set:
      id: buzzer_pattern_state
      value: 'true'
  - while:
      condition:
        lambda: return id(buzzer_pattern_state);
      then:
      - script.execute: sos_pattern
      - script.wait: sos_pattern
      - delay: 2s  # 2-second delay between SOS patterns
  turn_off_action:
  - globals.set:
      id: buzzer_pattern_state
      value: 'false'

sensor:
- platform: template
  name: ${human_devicename} State Duration
  id: door_state_duration_sensor
  lambda: |-
    return id(door_duration);
  unit_of_measurement: s
  icon: mdi:timer-outline
  update_interval: 1s

interval:
- interval: 1s
  then:
  - lambda: |-
      id(door_duration) += 1;

  - if:
      condition:
        lambda: return id(door_duration) % 2 == 0;  # Blink the LED every second
      then:
      - output.turn_on: status_led
      else:
      - output.turn_off: status_led

script:
- id: reset_timer
  then:
  - lambda: |-
      id(door_duration) = 0;

- id: sos_pattern
  then:
      # S
  - output.turn_on: buzzer_pwm
  - delay: 200ms
  - output.turn_off: buzzer_pwm
  - delay: 200ms
  - output.turn_on: buzzer_pwm
  - delay: 200ms
  - output.turn_off: buzzer_pwm
  - delay: 200ms
  - output.turn_on: buzzer_pwm
  - delay: 200ms
  - output.turn_off: buzzer_pwm
  - delay: 500ms

      # O
  - output.turn_on: buzzer_pwm
  - delay: 600ms
  - output.turn_off: buzzer_pwm
  - delay: 200ms
  - output.turn_on: buzzer_pwm
  - delay: 600ms
  - output.turn_off: buzzer_pwm
  - delay: 200ms
  - output.turn_on: buzzer_pwm
  - delay: 600ms
  - output.turn_off: buzzer_pwm
  - delay: 500ms

      # S
  - output.turn_on: buzzer_pwm
  - delay: 200ms
  - output.turn_off: buzzer_pwm
  - delay: 200ms
  - output.turn_on: buzzer_pwm
  - delay: 200ms
  - output.turn_off: buzzer_pwm
  - delay: 200ms
  - output.turn_on: buzzer_pwm
  - delay: 200ms
  - output.turn_off: buzzer_pwm
