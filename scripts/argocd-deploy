#!/usr/bin/env bash
set -euo pipefail

# argocd-deploy - Deploy ArgoCD applications with proper error handling
#
# This script deploys ArgoCD applications to a specified target revision and tracks
# success/failure status for each application individually.
#
# HOW IT WORKS:
# 1. For each application: patch source to target revision, sync, and wait for healthy state
# 2. Tracks which applications succeed vs fail during deployment
# 3. Optionally comments deployment results on GitHub PRs
# 4. Exits with error code if any deployments fail
#
# GITHUB ACTIONS INTEGRATION:
# The script comments deployment results on PRs when --comment-pr is provided.
#
# EXAMPLES:
# ./argocd-deploy --apps "app1 app2" --target-revision "main"
# ./argocd-deploy --apps "webapp" --target-revision "feature-branch" --comment-pr 123
#
# Usage: ./argocd-deploy --apps "app1 app2" --target-revision "branch-name" [--comment-pr PR_NUMBER]

# Default values
APPS=""
TARGET_REVISION=""
PR_NUMBER=""
SYNC_TIMEOUT="300"


# Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --apps)
      APPS="$2"
      shift 2
      ;;
    --target-revision)
      TARGET_REVISION="$2"
      shift 2
      ;;
    --comment-pr)
      PR_NUMBER="$2"
      shift 2
      ;;
    --sync-timeout)
      SYNC_TIMEOUT="$2"
      shift 2
      ;;
    --help)
      echo "Usage: $0 --apps 'app1 app2' --target-revision 'branch' [--comment-pr PR_NUMBER]"
      echo "Deploy ArgoCD applications to specified target revision"
      echo ""
      echo "Options:"
      echo "  --apps APPS              Space-separated list of application names"
      echo "  --target-revision REV    Target revision (branch/tag/commit)"
      echo "  --comment-pr PR_NUMBER   Comment results on PR"
      echo "  --sync-timeout SECONDS   Sync timeout in seconds (default: 300)"
      echo "  --help                   Show this help message"
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

# Validate required arguments
if [[ -z "$APPS" ]]; then
  echo "Error: --apps is required"
  exit 1
fi

if [[ -z "$TARGET_REVISION" ]]; then
  echo "Error: --target-revision is required"
  exit 1
fi

# Arrays to track results
SUCCESS_APPS=()
FAILED_APPS=()

# Function to comment on PR
comment_pr() {
  local message="$1"
  if [[ -n "$PR_NUMBER" && -n "${GH_TOKEN:-}" ]]; then
    gh pr comment "$PR_NUMBER" --body "$message"
  else
    echo "PR Comment: $message"
  fi
}

# Function to patch all apps to update target revision
patch_apps() {
  local -a apps_array
  read -ra apps_array <<< "$APPS"

  # Define JSON patch for target revision update
  local patch_json
  read -r -d '' patch_json <<-EOF || true
	[
	  {
	    "op": "replace",
	    "path": "/spec/source/targetRevision",
	    "value": "$TARGET_REVISION"
	  }
	]
	EOF

  # Patch all apps to update target revision - fail fast if any fail
  for app in "${apps_array[@]}"; do
    echo "Updating $app to target revision: $TARGET_REVISION..."
    if ! argocd app patch "$app" --patch "$patch_json" 2>&1; then
      echo "‚ùå Failed to update target revision for $app"
      FAILED_APPS=("${apps_array[@]}")
      comment_pr "‚ùå Failed to update target revision for **$app** to \`$TARGET_REVISION\`. Check ArgoCD application configuration."
      return 1
    fi
    echo "‚úÖ Updated $app target revision"

    echo "Refreshing $app to resolve new target revision..."
    if ! argocd app get "$app" --refresh 2>&1; then
      echo "‚ö†Ô∏è Warning: Failed to refresh $app, continuing anyway..."
    fi
  done
}

# Function to sync all apps
sync_apps() {
  local -a apps_array
  read -ra apps_array <<< "$APPS"

  echo "Syncing apps: ${apps_array[*]}"
  if argocd app sync "${apps_array[@]}" --timeout "$SYNC_TIMEOUT" 2>&1; then
    SUCCESS_APPS=("${apps_array[@]}")
    echo "‚úÖ Successfully synced: ${apps_array[*]}"
    comment_pr "üöÄ Successfully deployed **${apps_array[*]}** to \`$TARGET_REVISION\`"
  else
    FAILED_APPS=("${apps_array[@]}")
    echo "‚ùå Failed to sync: ${apps_array[*]}"
    comment_pr "‚ùå Deployment failed during sync phase for **${apps_array[*]}**. Apps were updated to \`$TARGET_REVISION\` but failed to sync. Check ArgoCD for details."
    return 1
  fi
}

# Main deployment
echo "Starting deployment of apps: $APPS"
echo "Target revision: $TARGET_REVISION"

# Patch apps first (fail fast if any patch fails)
if ! patch_apps; then
  exit 1
fi

# Then sync all apps (fail if sync fails)
if ! sync_apps; then
  exit 1
fi

echo ""
echo "Deployment Summary:"
echo "  Total: $(echo "$APPS" | wc -w)"
echo "  Success: ${#SUCCESS_APPS[@]}"
echo "  Failed: ${#FAILED_APPS[@]}"
