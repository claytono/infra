#!/usr/bin/env bash
set -euo pipefail

# argocd-detect-apps - Detect ArgoCD applications affected by file changes
#
# This script analyzes changed files in the kubernetes/ directory to determine
# which ArgoCD applications are affected by those changes.
#
# HOW IT WORKS:
# 1. Gets list of changed files in kubernetes/ directory via git diff
# 2. Extracts application names from file paths using pattern: kubernetes/APP_NAME/*
# 3. Validates that detected apps have ApplicationSet management enabled
#    (commonAnnotations.argoManaged: "true" in their kustomization.yaml)
# 4. Outputs results for use in GitHub Actions workflows
#
# DIRECTORY STRUCTURE ASSUMPTION:
# kubernetes/
# ├── app1/
# │   ├── kustomization.yaml    # <- with commonAnnotations.argoManaged: "true"
# │   └── deployment.yaml
# ├── app2/
# │   ├── kustomization.yaml    # <- with commonAnnotations.argoManaged: "true"
# │   └── helm/
# └── shared-resources/         # <- Would be detected if has argoManaged annotation
#
# GITHUB ACTIONS INTEGRATION:
# The script sets these outputs in $GITHUB_OUTPUT:
# - apps: Space-separated list of application names
# - app_count: Number of applications detected
#
# EXAMPLES:
# ./argocd-detect-apps --base-ref main       # Compare current branch to main
# ./argocd-detect-apps --head-ref feature    # Compare feature branch to main
# ./argocd-detect-apps --base-ref HEAD~1 --head-ref HEAD  # Compare last commit
#
# Usage: ./argocd-detect-apps [--base-ref BASE_REF] [--head-ref HEAD_REF]

BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(dirname "$BASEDIR")"
GITHUB_OUTPUT="${GITHUB_OUTPUT:-/dev/stdout}"

# Default values
BASE_REF="main"
HEAD_REF="HEAD"

# Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --base-ref)
      BASE_REF="$2"
      shift 2
      ;;
    --head-ref)
      HEAD_REF="$2"
      shift 2
      ;;
    --help)
      echo "Usage: $0 [--base-ref BASE_REF] [--head-ref HEAD_REF]"
      echo "Detects ArgoCD applications affected by file changes"
      echo ""
      echo "Options:"
      echo "  --base-ref REF     Base reference for comparison (default: main)"
      echo "  --head-ref REF     Head reference for comparison (default: HEAD)"
      echo "  --help             Show this help message"
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

# Function to get changed files from git diff
get_changed_files() {
  git diff --name-only "$BASE_REF"..."$HEAD_REF" \
    | grep -E '^kubernetes/' \
    || true
}

# Function to extract app names from file paths
extract_app_names() {
  local changed_files="$1"
  local apps=()

  while read -r file; do
    if [[ -n "$file" ]]; then
      local app_name=""

      # Extract from kubernetes/APP_NAME/ directory structure
      if [[ "$file" =~ ^kubernetes/([^/]+)/ ]]; then
        local raw_app_name="${BASH_REMATCH[1]}"

        # Only consider it an app if the directory has a kustomization.yaml
        if [[ -f "$REPO_ROOT/kubernetes/$raw_app_name/kustomization.yaml" ]]; then
          app_name="$raw_app_name"
          # Strip numeric prefixes like "0-flannel" -> "flannel"
          if [[ "$app_name" =~ ^[0-9]+-(.+)$ ]]; then
            app_name="${BASH_REMATCH[1]}"
          fi
        fi
      fi

      # Add to array if not already present and not empty
      if [[ -n "$app_name" && ! " ${apps[*]} " =~ \ ${app_name}\  ]]; then
        apps+=("$app_name")
      fi
    fi
  done <<< "$changed_files"

  # Output apps as space-separated string
  printf '%s\n' "${apps[@]}"
}

# Function to validate apps have ApplicationSet management enabled
validate_apps() {
  local apps=("$@")
  local valid_apps=()

  for app in "${apps[@]}"; do
    local kustomization_file=""

    # Check for kustomization.yaml in the original directory (with potential numeric prefix)
    if [[ -f "$REPO_ROOT/kubernetes/$app/kustomization.yaml" ]]; then
      kustomization_file="$REPO_ROOT/kubernetes/$app/kustomization.yaml"
    else
      # Check with numeric prefixes (0-app, 1-app, etc.)
      for prefix_dir in "$REPO_ROOT/kubernetes/"[0-9]*-"$app"; do
        if [[ -f "$prefix_dir/kustomization.yaml" ]]; then
          kustomization_file="$prefix_dir/kustomization.yaml"
          break
        fi
      done
    fi

    if [[ -n "$kustomization_file" ]]; then
      # Check if the kustomization.yaml has argoManaged annotation
      if grep -q "argoManaged:[[:space:]]*['\"]true['\"]" "$kustomization_file"; then
        valid_apps+=("$app")
      else
        echo "Warning: Application '$app' found but not managed by ApplicationSet (missing argoManaged: true annotation)" >&2
      fi
    else
      echo "Warning: Application '$app' kustomization.yaml not found" >&2
    fi
  done

  printf '%s\n' "${valid_apps[@]}"
}

cd "$REPO_ROOT"
changed_files=$(get_changed_files)

if [[ -z "$changed_files" ]]; then
  echo "No kubernetes files changed"
  echo "apps=" >> "$GITHUB_OUTPUT"
  echo "app_count=0" >> "$GITHUB_OUTPUT"
  exit 0
fi

# Extract app names
readarray -t app_names < <(extract_app_names "$changed_files")

if [[ ${#app_names[@]} -eq 0 ]]; then
  echo "No ArgoCD applications detected in changed files"
  echo "apps=" >> "$GITHUB_OUTPUT"
  echo "app_count=0" >> "$GITHUB_OUTPUT"
  exit 0
fi

# Validate apps have ApplicationSet management enabled
readarray -t valid_apps < <(validate_apps "${app_names[@]}")

# Output results
if [[ ${#valid_apps[@]} -gt 0 ]]; then
  echo "Detected applications: ${valid_apps[*]}"
  echo "apps=${valid_apps[*]}" >> "$GITHUB_OUTPUT"
  echo "app_count=${#valid_apps[@]}" >> "$GITHUB_OUTPUT"
else
  echo "No valid ArgoCD applications found"
  echo "apps=" >> "$GITHUB_OUTPUT"
  echo "app_count=0" >> "$GITHUB_OUTPUT"
fi
